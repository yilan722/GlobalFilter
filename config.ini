# config.ini
[STRATEGY]
# Pine Script中的参数
bb_length = 365
bb_mult = 2.0
ema_fast_length = 30
ema_slow_length = 90
trend_timeframe = 4h # 趋势过滤周期 (m for minutes, h for hours, d for day)

[MARKETS]
# 指向你的股票列表文件
us_stocks_path = stock_lists/us_stocks.txt
hk_stocks_path = stock_lists/hk_stocks.txt
cn_stocks_path = stock_lists/cn_stocks.txt```
crypto_symbols_path = stock_lists/crypto_symbols.txt # <-- 新增
[CRYPTO_SETTINGS] # <-- 新增
# 币安API只接受特定的时间周期字符串
trend_timeframe_crypto = 4h # 趋势过滤周期 (1m, 5m, 1h, 4h, 1d)
#### **4. 准备股票列表**

在 `stock_lists/` 文件夹下，创建对应的 `.txt` 文件，每行放一个股票代码。

*   **`us_stocks.txt`**: `AAPL`, `GOOGL`, `MSFT` ...
*   **`hk_stocks.txt`**: `0700.HK`, `9988.HK` ... (港股代码在yfinance中需要`.HK`后缀)
*   **`cn_stocks.txt`**: `600519.SH`, `000001.SZ` ... (A股代码在Tushare中需要`.SH`或`.SZ`后缀)
*   **`crypto_symbols.txt`**: 这里输入的交易对必须是币安API接受的格式（例如 BTCUSDT, ETHUSDT）
---

### **第二阶段：编写核心代码模块**

现在我们来填充每个 `.py` 文件的内容。

#### **1. 数据获取器 (`data_fetcher.py`)**

这个模块负责从不同来源获取数据，并处理多时间周期（MTF）的问题。

```python
# data_fetcher.py
import yfinance as yf
import tushare as ts
import pandas as pd
import os
import requests


def get_binance_data(symbol, interval='1d', limit=500):
    """
    使用Binance API获取加密货币K线数据。
    返回与yfinance格式兼容的DataFrame。
    """
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        
        # 转换数据为Pandas DataFrame
        df = pd.DataFrame(data, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume', 
            'close_time', 'quote_asset_volume', 'number_of_trades', 
            'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
        ])
        
        # --- 关键：格式化DataFrame以匹配yfinance的输出 ---
        df = df[['timestamp', 'open', 'high', 'low', 'close', 'volume']].astype(float)
        df['date'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('date', inplace=True)
        df.drop('timestamp', axis=1, inplace=True)
        # 币安API返回的日线数据时间是当天的开始，yfinance是当天的结束，为了统一，我们保持原样
        
        return df

    except requests.RequestException as e:
        print(f"🔥 Error fetching {symbol} from Binance: {e}")
        return pd.DataFrame() # 返回空的DataFrame
        
# 初始化Tushare
pro = ts.pro_api(os.getenv('TUSHARE_TOKEN'))

def get_yfinance_data(ticker, period="1y", interval="1d"):
    """使用yfinance获取美股/港股数据"""
    stock = yf.Ticker(ticker)
    df = stock.history(period=period, interval=interval)
    # yfinance列名为大写，统一为小写
    df.columns = [col.lower() for col in df.columns]
    return df

def get_tushare_data(ticker, start_date, end_date):
    """使用Tushare获取A股数据"""
    # Tushare的日期格式是YYYYMMDD
    df = pro.daily(ts_code=ticker, start_date=start_date, end_date=end_date)
    # Tushare返回的数据是倒序的，需要反转
    df = df.sort_values(by='trade_date', ascending=True)
    # 重命名列以匹配yfinance
    df = df.rename(columns={'trade_date': 'date', 'vol': 'volume'})
    df['date'] = pd.to_datetime(df['date'])
    df.set_index('date', inplace=True)
    return df
